const fs = require('fs-extra');
const path = require('path')
const resolve = (dir) => path.join(__dirname, '..', dir)

module.exports = {
  // If project only contains files generated by GH, it’s safe.
  // We also special case IJ-based products .idea because it integrates with CRA:
  // https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-243446094
  isSafeToCreateProjectIn (root) {
    const validFiles = [
      '.DS_Store',
      'Thumbs.db',
      '.git',
      '.gitignore',
      '.idea',
      'README.md',
      'LICENSE',
      'web.iml',
      '.hg',
      '.hgignore',
      '.hgcheck',
      '.npmignore',
      'mkdocs.yml',
      'docs',
      '.travis.yml',
      '.gitlab-ci.yml',
      '.gitattributes',
    ];

    return (
      !fs.existsSync(root) ||
      fs.readdirSync(root).every(file => validFiles.includes(file))
    );
  },
  // 过滤不用复制的文件
  filter (src, dest, type) {
    if (src.includes(resolve('packages/node_modules')) || src.includes(resolve('packages/dist')) || src.includes(resolve('packages/package.json'))) return false
    // 无依赖
    if (type === 0 && (src.includes(resolve('packages/vue')) || src.includes(resolve('packages/react')))) return false
    // react项目
    if (type === 1 && src.includes(resolve('packages/vue'))) return false
    // vue项目
    if (type === 2 && src.includes(resolve('packages/react'))) return false
    return true
  },
  // 根据项目类型修改文件，只对路径下的文件处理，不遍历文件夹
  fileModify (modifyPath, type) {
    let files = fs.readdirSync(modifyPath)
    let regex;
    switch (type) {
      case 1:
        regex = /([ ]*\/\/\s(vue|dev)-start[\s\S]*?\/\/\s(vue|dev)-end[\t\r\n\v\f]+)|([ ]*\/\/\s(react-start|react-end)[\t\r\n\v\f]+)/g
        break;
      case 2:
        regex = /([ ]*\/\/\s(react|dev)-start[\s\S]*?\/\/\s(react|dev)-end[\t\r\n\v\f]+)|([ ]*\/\/\s(vue-start|vue-end)[\t\r\n\v\f]+)/g
        break;
      default:
        regex = /[ ]*\/\/\s(vue|react|dev)-start[\s\S]*?\/\/\s(vue|react|dev)-end[\t\r\n\v\f]+/g
    }
    files.forEach(file => {
      if (fs.statSync(path.join(modifyPath, file)).isFile()) {
        let data = fs.readFileSync(path.join(modifyPath, file));
        data = data.toString().replace(regex, '')
        fs.writeFileSync(path.join(modifyPath, file), data);
      }
    })
  }
}
